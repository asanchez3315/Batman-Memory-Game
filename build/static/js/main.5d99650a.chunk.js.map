{"version":3,"sources":["Images sync /^/.*$","Images/1.jpg","Images/10.jpg","Images/11.jpg","Images/12.jpg","Images/2.jpg","Images/3.jpg","Images/4.jpg","Images/5.jpg","Images/6.jpg","Images/7.jpg","Images/8.jpg","Images/9.jpg","Images/desktop.ini","components/NavigationBar/NavigationBar.js","components/Jumbotron/Jumbotron.js","components/Card/Card.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["map","./1.jpg","./10.jpg","./11.jpg","./12.jpg","./2.jpg","./3.jpg","./4.jpg","./5.jpg","./6.jpg","./7.jpg","./8.jpg","./9.jpg","./desktop.ini","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","p","NavigationBar","props","react_default","a","createElement","className","score","Jumbotron","Card","onClick","imageHandlerClick","alt","image","replace","src","require","Footer","class","aria-hidden","App","state","Batman","clickedImage","event","currentImage","target","_this","indexOf","setState","sort","b","Math","random","alert","concat","_this2","this","components_NavigationBar_NavigationBar","components_Jumbotron_Jumbotron","components_Card_Card","key","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5d99650a.chunk.js","sourcesContent":["var map = {\n\t\"./1.jpg\": 20,\n\t\"./10.jpg\": 21,\n\t\"./11.jpg\": 22,\n\t\"./12.jpg\": 23,\n\t\"./2.jpg\": 24,\n\t\"./3.jpg\": 25,\n\t\"./4.jpg\": 26,\n\t\"./5.jpg\": 27,\n\t\"./6.jpg\": 28,\n\t\"./7.jpg\": 29,\n\t\"./8.jpg\": 30,\n\t\"./9.jpg\": 31,\n\t\"./desktop.ini\": 32\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 19;","module.exports = __webpack_public_path__ + \"static/media/1.b5ecdc65.jpg\";","module.exports = __webpack_public_path__ + \"static/media/10.b2839b79.jpg\";","module.exports = __webpack_public_path__ + \"static/media/11.445f653d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/12.60c503ff.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.fbabf197.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.ac7b1343.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.4e8c35fb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.9796b457.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6.92f50dd5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/7.29692bed.jpg\";","module.exports = __webpack_public_path__ + \"static/media/8.b95d5696.jpg\";","module.exports = __webpack_public_path__ + \"static/media/9.a3431347.jpg\";","module.exports = __webpack_public_path__ + \"static/media/desktop.0340b459.ini\";","import React  from \"react\";\nimport \"./NavigationBar.css\";\n\nconst NavigationBar =(props) =>(\n  \n      <nav className=\"navbar navbar-default sticky\">\n         <ul>\n          <li className=\"itemLeft\"></li>\n          <li className=\"itemCenter\">Clicky Game!</li>\n          <li className=\"itemRight\">Score: {props.score}</li>\n        </ul>\n      </nav>\n    );\n  \n\n\nexport default NavigationBar;","//reusable Jumbotron component\nimport React from \"react\";\nimport \"./Jumbotron.css\";\n\nconst Jumbotron = () => (\n\t<header className = \"header\">\n\t\t<h1> Batman Memory Game!</h1>\n\t\t<h2>Click on any image to earn a point, but make sure you  don't click on the same image more than once or its game over. Click all 12 pics and become THE BATMAN!</h2>\n\t</header>\n);\nexport default Jumbotron;\n","//  reusable FriendCard component\nimport React from \"react\";\nimport \"./Card.css\";\n\n//pass the image into each card so all 12 are rendered\nconst Card = props => (\n  <div className=\"card\" onClick={props.imageHandlerClick}>\n    <div className=\"img-container\">\n      <img alt={props.image.replace(\".jpg\", \"\")} src={require(\"../../Images/\" + props.image)} />\n    </div>\n  </div>\n);\n\nexport default Card","// reusable Footer component\nimport React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = () => (\n\t<header className = \"footer\">\n\t\t<p>@<i class=\"fa fa-copyright\" aria-hidden=\"true\">copyright 2019</i></p>\n\t</header>\n);\n\nexport default Footer;","//imports dependencies and files\nimport React, { Component } from \"react\";\nimport NavigationBar from \"./components/NavigationBar/NavigationBar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Card from \"./components/Card/Card\";\nimport Footer from \"./components/Footer/Footer\";\nimport Batman from \"./Batman.json\";\nimport \"./App.css\";\n\n//sets state to 0 or empty\nclass App extends Component {\n  state = {\n    Batman,\n    clickedImage: [],\n    score: 0,\n  \n  };\n\n//when you click on a card it is removed from the array\n  imageHandlerClick = event => {\n    const currentImage = event.target.alt;\n    const imageClicked =\n      this.state.clickedImage.indexOf(currentImage) > -1;\n\n//if you click on an image that has already been selected, the game resets and cards reshuffled\n    if (imageClicked) {\n      this.setState({\n        Batman: this.state.Batman.sort(function(a, b) {\n          return 0.5 - Math.random();\n        }),\n        clickedImage: [],\n        score: 0\n      });\n        alert(\"Don't give up! Challenge again?\");\n\n//if you click on an available Image, your score is increased by one and cards reshuffled\n    } else {\n      this.setState(\n        {\n          Batman: this.state.Batman.sort(function(a, b) {\n            return 0.5 - Math.random();\n          }),\n          clickedImage: this.state.clickedImage.concat(\n            currentImage\n          ),\n          score: this.state.score + 1\n        },\n//if you  correct you guess correctly 12 times, a congrats message and the game resets        \n        () => {\n          if (this.state.score === 12) {\n            alert(\"You are THE BATMAN\");\n            this.setState({\n              Batman: this.state.Batman.sort(function(a, b) {\n                return 0.5 - Math.random();\n              }),\n              clickedImage: [],\n              score: 0\n            });\n          }\n        }\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <NavigationBar \n          score={this.state.score}\n        />\n        <Jumbotron />\n        <div className=\"wrapper\">\n          {this.state.Batman.map(Batman => (\n            <Card\n              imageHandlerClick={this.imageHandlerClick}\n              id={Batman.id}\n              key={Batman.id}\n              image={Batman.image}\n            />\n          ))}\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}